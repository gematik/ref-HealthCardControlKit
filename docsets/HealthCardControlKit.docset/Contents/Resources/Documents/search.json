{"Typealiases.html#/s:20HealthCardControlKit22AutCertificateResponsea":{"name":"AutCertificateResponse","abstract":"<p>Alias for the certificate response that holds the raw certificate + the AutCertInfo associated with it.</p>"},"Typealiases.html#/s:20HealthCardControlKit18ECPointCoordinatesa":{"name":"ECPointCoordinates","abstract":"<p>Alias for <code>(x: BigInt, y: BigInt)</code></p>"},"Structs/EllipticCurve.html#/s:20HealthCardControlKit13EllipticCurveV15brainpoolP256r1ACvpZ":{"name":"brainpoolP256r1","abstract":"<p>BrainpoolP256r1 curve</p>","parent_name":"EllipticCurve"},"Structs/EllipticCurve.html#/s:20HealthCardControlKit13EllipticCurveV14inverseModular1k1p6BigIntAGVAH_AHtFZ":{"name":"inverseModular(k:p:)","abstract":"<p>Returns the inverse of k modulo p.","parent_name":"EllipticCurve"},"Structs/EllipticCurve.html":{"name":"EllipticCurve","abstract":"<p>Structure holding parameters for defining Elliptic curves and its arithmetic operations</p>"},"Protocols/SecureMessaging.html#/s:20HealthCardControlKit15SecureMessagingP7encrypt7command0B17ReaderProviderApi11CommandType_pAfG_p_tKF":{"name":"encrypt(command:)","abstract":"<p>Encrypt the APDU Command.</p>","parent_name":"SecureMessaging"},"Protocols/SecureMessaging.html#/s:20HealthCardControlKit15SecureMessagingP7decrypt8response0B17ReaderProviderApi12ResponseType_pAfG_p_tKF":{"name":"decrypt(response:)","abstract":"<p>Decrypt the APDU Response.</p>","parent_name":"SecureMessaging"},"Protocols/SecureMessaging.html#/s:20HealthCardControlKit15SecureMessagingP10invalidateyyF":{"name":"invalidate()","abstract":"<p>Destruct the information held by this object.</p>","parent_name":"SecureMessaging"},"Protocols/SecureMessaging.html":{"name":"SecureMessaging","abstract":"<p>Component that attached to a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SecureCardChannel.html\">SecureCardChannel</a></code> takes care of message de-/encryption.</p>"},"Extensions/ASN1Kit/ObjectIdentifier.html#/s:7ASN1Kit16ObjectIdentifierV017HealthCardControlB0E21keyAgreementAlgorithmAD03KeyI0C0J0OSgvp":{"name":"keyAgreementAlgorithm","abstract":"<p>Undocumented</p>","parent_name":"ObjectIdentifier"},"Extensions/ASN1Kit/ObjectIdentifier.html":{"name":"ObjectIdentifier","parent_name":"ASN1Kit"},"Extensions/CardType.html#/s:21CardReaderProviderApi0A4TypeP06HealthA10ControlKitE17openSecureSession3can12writeTimeout04readN00fa6AccessH010ExecutableCyAI0faE0_pGAI3CANV_S2dtF":{"name":"openSecureSession(can:writeTimeout:readTimeout:)","abstract":"<p>Open a secure session with a Card for further scheduling/attaching Executable commands</p>","parent_name":"CardType"},"Extensions/CommandType.html#/s:21CardReaderProviderApi11CommandTypeP06HealthA10ControlKitE18isPaceKeyEncryptedSbvp":{"name":"isPaceKeyEncrypted","abstract":"<p>Undocumented</p>","parent_name":"CommandType"},"Extensions/HealthCard/Error.html#/s:19HealthCardAccessKit0aB0C0ab7ControlD0E5ErrorO11operationalyA2FmF":{"name":"operational","abstract":"<p>Operational error of the underlying card</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/s:19HealthCardAccessKit0aB0C0ab7ControlD0E5ErrorO18unexpectedResponseyAfA0H6StatusO_AItcAFmF":{"name":"unexpectedResponse(actual:expected:)","abstract":"<p>Underlying card responds with an unexpected status</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/s:19HealthCardAccessKit0aB0C0ab7ControlD0E5ErrorO07unknownB4TypeyAfA21ApplicationIdentifierVSg_tcAFmF":{"name":"unknownCardType(aid:)","abstract":"<p>The application identifier was not found or recognized</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/s:19HealthCardAccessKit0aB0C0ab7ControlD0E5ErrorO17illegalGenerationyAfA0B8Version2V_tcAFmF":{"name":"illegalGeneration(version:)","abstract":"<p>When the CardVersion2 file could not be read/parsed</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html#/s:19HealthCardAccessKit0aB0C0ab7ControlD0E5ErrorO011unsupportedB4TypeyA2FmF":{"name":"unsupportedCardType","abstract":"<p>Unsupported card type</p>","parent_name":"Error"},"Extensions/HealthCard/Error.html":{"name":"Error","abstract":"<p>Undocumented</p>","parent_name":"HealthCard"},"Extensions/CardChannelType.html#/s:21CardReaderProviderApi0A11ChannelTypeP06HealthA10ControlKitE22expectedLengthWildcardSivp":{"name":"expectedLengthWildcard","abstract":"<p>Undocumented</p>","parent_name":"CardChannelType"},"Extensions/CardChannelType.html#/s:21CardReaderProviderApi0A11ChannelTypeP06HealthA10ControlKitE04readaF012writeTimeout0jL00ga6AccessI010ExecutableCyAH0ga8PropertyF0OGSd_SdtF":{"name":"readCardType(writeTimeout:readTimeout:)","abstract":"<p>Determine <code>HealthCardPropertyType</code> either by known initialApplicationIdentifier of the <code>CardType</code>","parent_name":"CardChannelType"},"Extensions/BigInt.html#/s:6BigIntAAV20HealthCardControlKitE16fromUnsignedData3buf3off6lengthAB10Foundation0I0V_S2itFZ":{"name":"fromUnsignedData(buf:off:length:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Extensions/Data.html#/s:10Foundation4DataV20HealthCardControlKitE4sha1ACyF":{"name":"sha1()","abstract":"<p>The 128-bit Secure Hash (SHA1) of Data block <code>self</code></p>","parent_name":"Data"},"Extensions/Data.html#/s:10Foundation4DataV20HealthCardControlKitE19dropLeadingZeroByteACvp":{"name":"dropLeadingZeroByte","abstract":"<p>Undocumented</p>","parent_name":"Data"},"Extensions/Data.html#/s:10Foundation4DataV20HealthCardControlKitE20padWithLeadingZeroes11totalLengthACSi_tF":{"name":"padWithLeadingZeroes(totalLength:)","abstract":"<p>Undocumented</p>","parent_name":"Data"},"Extensions/ResponseStatus.html#/s:19HealthCardAccessKit14ResponseStatusO0ab7ControlD0E10retryCountSivp":{"name":"retryCount","abstract":"<p>Undocumented</p>","parent_name":"ResponseStatus"},"Extensions/HealthCardPropertyType.html#/s:19HealthCardAccessKit0aB12PropertyTypeO0ab7ControlD0E11autCertInfoAD03AutiJ0OSgvp":{"name":"autCertInfo","abstract":"<p>Return the card&rsquo;s certificate information</p>","parent_name":"HealthCardPropertyType"},"Extensions/HealthCardPropertyType.html#/s:19HealthCardAccessKit0aB12PropertyTypeO0ab7ControlD0E4from7cardAid0I8Version2AcD0bJ0O_AA0bK0VtKFZ":{"name":"from(cardAid:cardVersion2:)","abstract":"<p>Undocumented</p>","parent_name":"HealthCardPropertyType"},"Extensions/HealthCardType.html#/s:19HealthCardAccessKit0aB4TypeP0ab7ControlD0E18readAutCertificateAA10ExecutableCyAD0H8CertInfoO4info_10Foundation4DataV11certificatetGyF":{"name":"readAutCertificate()","abstract":"<p>Read the MF/DF.ESIGN.EF.C.CH.AUT.[E256/R2048] certificate from the receiver</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/s:19HealthCardAccessKit0aB4TypeP0ab7ControlD0E4sign9challengeAA10ExecutableCyAA0ab8ResponseE0_pG10Foundation4DataV_tF":{"name":"sign(challenge:)","abstract":"<p>Sign a challenge (for example a hash value) for authentication.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/s:19HealthCardAccessKit0aB4TypeP0ab7ControlD0E6verify3pin4typeAA10ExecutableCyAD17VerifyPinResponseOGAA07Format2L0V_AA13EgkFileSystemV0L0OtF":{"name":"verify(pin:type:)","abstract":"<p>Verify Password for a Pin type</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/s:19HealthCardAccessKit0aB4TypeP0ab7ControlD0E16readSelectedFile8expected011failOnEndOfI7Warning6offsetAA10ExecutableCy10Foundation4DataVGSiSg_SbSitF":{"name":"readSelectedFile(expected:failOnEndOfFileWarning:offset:)","abstract":"<p>Read the current selected DF/EF File</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/s:19HealthCardAccessKit0aB4TypeP0ab7ControlD0E15selectDedicated4file3fcp6lengthAA10ExecutableCyAA14ResponseStatusO_AA04FileF9ParameterVSgtGAA0hO0V_SbSitF":{"name":"selectDedicated(file:fcp:length:)","abstract":"<p>Select a dedicated file with or without requesting the FileIdentifier&rsquo;s File Control Parameter.</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html#/s:19HealthCardAccessKit0aB4TypeP0ab7ControlD0E30determineKeyAgreementAlgorithm12writeTimeout04readL0AA10ExecutableCyAD0hI0C0J0OGSd_SdtKF":{"name":"determineKeyAgreementAlgorithm(writeTimeout:readTimeout:)","abstract":"<p>Undocumented</p>","parent_name":"HealthCardType"},"Extensions/HealthCardType.html":{"name":"HealthCardType"},"Extensions/HealthCardPropertyType.html":{"name":"HealthCardPropertyType"},"Extensions/ResponseStatus.html":{"name":"ResponseStatus"},"Extensions/Data.html":{"name":"Data","abstract":"<p>Data extension Data+Secure</p>"},"Extensions/BigInt.html":{"name":"BigInt"},"Extensions/CardChannelType.html":{"name":"CardChannelType"},"Extensions/HealthCard.html":{"name":"HealthCard"},"Extensions/CommandType.html":{"name":"CommandType"},"Extensions/CardType.html":{"name":"CardType","abstract":"<p>Extensions on CardType to negotiate a PACE session key for further secure</p>"},"Extensions/ASN1Kit.html":{"name":"ASN1Kit"},"Enums/SelectError.html#/s:20HealthCardControlKit11SelectErrorO08failedToE3AidyAC0ab6AccessD021ApplicationIdentifierV_AE14ResponseStatusOSgtcACmF":{"name":"failedToSelectAid(_:status:)","abstract":"<p>Undocumented</p>","parent_name":"SelectError"},"Enums/SelectError.html#/s:20HealthCardControlKit11SelectErrorO08failedToE3FidyAC0ab6AccessD014FileIdentifierV_AE14ResponseStatusOSgtcACmF":{"name":"failedToSelectFid(_:status:)","abstract":"<p>Undocumented</p>","parent_name":"SelectError"},"Enums/ReadError.html#/s:20HealthCardControlKit9ReadErrorO18unexpectedResponseyAC0ab6AccessD00H6StatusO_tcACmF":{"name":"unexpectedResponse(state:)","abstract":"<p>The response status did not match the expected response status</p>","parent_name":"ReadError"},"Enums/ReadError.html#/s:20HealthCardControlKit9ReadErrorO6noDatayAC0ab6AccessD014ResponseStatusO_tcACmF":{"name":"noData(state:)","abstract":"<p>No data has been returned</p>","parent_name":"ReadError"},"Enums/ReadError.html#/s:20HealthCardControlKit9ReadErrorO010fcpMissingE4SizeyAC0ab6AccessD014ResponseStatusO_tcACmF":{"name":"fcpMissingReadSize(state:)","abstract":"<p>Undocumented</p>","parent_name":"ReadError"},"Enums/ECPoint/InvalidArgument.html#/s:20HealthCardControlKit7ECPointO15InvalidArgumentO5emptyyA2EmF":{"name":"empty","abstract":"<p>Undocumented</p>","parent_name":"InvalidArgument"},"Enums/ECPoint/InvalidArgument.html#/s:20HealthCardControlKit7ECPointO15InvalidArgumentO20encodingNotSupportedyA2EmF":{"name":"encodingNotSupported","abstract":"<p>Undocumented</p>","parent_name":"InvalidArgument"},"Enums/ECPoint/InvalidArgument.html#/s:20HealthCardControlKit7ECPointO15InvalidArgumentO20invalidPointEncodingyA2EmF":{"name":"invalidPointEncoding","abstract":"<p>Undocumented</p>","parent_name":"InvalidArgument"},"Enums/ECPoint/InvalidArgument.html#/s:20HealthCardControlKit7ECPointO15InvalidArgumentO23invalidInfinityEncodingyA2EmF":{"name":"invalidInfinityEncoding","abstract":"<p>Undocumented</p>","parent_name":"InvalidArgument"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO8infiniteyA2CmF":{"name":"infinite","abstract":"<p>Represents the point infinity</p>","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO6finiteyAC6BigIntAEV1x_AF1yt_tcACmF":{"name":"finite(_:)","abstract":"<p>Represents a finite point with coordinates (x: BigInt, y: BigInt)</p>","parent_name":"ECPoint"},"Enums/ECPoint/InvalidArgument.html":{"name":"InvalidArgument","abstract":"<p>Undocumented</p>","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO5parse7encodedAC10Foundation4DataV_tKFZ":{"name":"parse(encoded:)","abstract":"<p>For now we only handle uncompressed input like [0x4, x, y]</p>","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO6xCoord6BigIntAEVSgvp":{"name":"xCoord","abstract":"<p>(Normalized) x coordinate of this ECPoint","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO6yCoord6BigIntAEVSgvp":{"name":"yCoord","abstract":"<p>(Normalized) y coordinate of this ECPoint","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO26encodedUncompressed32Bytes10Foundation4DataVvp":{"name":"encodedUncompressed32Bytes","abstract":"<p>Uncompressed data encoding of ECPoint. Hexadecimal representation should start with 0x04.","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"ECPoint"},"Enums/VerifyPinResponse.html#/s:20HealthCardControlKit17VerifyPinResponseO7successyA2CmF":{"name":"success","abstract":"<p>Pin verification succeeded</p>","parent_name":"VerifyPinResponse"},"Enums/VerifyPinResponse.html#/s:20HealthCardControlKit17VerifyPinResponseO6failedyACSi_tcACmF":{"name":"failed(retryCount:)","abstract":"<p>Pin verification failed, retry count is the number of retries left for the given <code>EgkFileSystem.Pin</code> type</p>","parent_name":"VerifyPinResponse"},"Enums/AutCertInfo.html#/s:20HealthCardControlKit11AutCertInfoO02efE5R2048yA2CmF":{"name":"efAutR2048","abstract":"<p>eGK2 ESign certificate</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:20HealthCardControlKit11AutCertInfoO02efE4E256yA2CmF":{"name":"efAutE256","abstract":"<p>eGK2.1 ESign certificate</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:20HealthCardControlKit11AutCertInfoO5eSign0ab6AccessD021ApplicationIdentifierVvp":{"name":"eSign","abstract":"<p>The ESIGN file location on the card</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:20HealthCardControlKit11AutCertInfoO11certificate0ab6AccessD013DedicatedFileVvp":{"name":"certificate","abstract":"<p>The certificate file location on the card</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:20HealthCardControlKit11AutCertInfoO9algorithm0ab6AccessD012PSOAlgorithmOvp":{"name":"algorithm","abstract":"<p>The associated signing algorithm for the certificate type</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html#/s:20HealthCardControlKit11AutCertInfoO3key0ab6AccessD03KeyVvp":{"name":"key","abstract":"<p>The associated key for signing</p>","parent_name":"AutCertInfo"},"Enums/AutCertInfo.html":{"name":"AutCertInfo","abstract":"<p>MF/DF.ESIGN.EF.C.CH.AUT type</p>"},"Enums/VerifyPinResponse.html":{"name":"VerifyPinResponse","abstract":"<p>Response to a Verify Pin command on a HealthCard</p>"},"Enums/ECPoint.html":{"name":"ECPoint","abstract":"<p>Representing a point on a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/EllipticCurve.html\">EllipticCurve</a></code>."},"Enums/ReadError.html":{"name":"ReadError","abstract":"<p>Domain error cases for Reading files from a <code>HealthCardType</code> e.g. <code>CardChannelType</code></p>"},"Enums/SelectError.html":{"name":"SelectError","abstract":"<p>Undocumented</p>"},"Classes/SecureHealthCard.html#/s:19HealthCardAccessKit0aB4TypeP6statusAA0aB6StatusOvp":{"name":"status","parent_name":"SecureHealthCard"},"Classes/SecureHealthCard.html#/s:19HealthCardAccessKit0aB4TypeP07currentB7Channel0B17ReaderProviderApi0bgE0_pvp":{"name":"currentCardChannel","parent_name":"SecureHealthCard"},"Classes/SecureHealthCard.html#/s:20HealthCardControlKit06SecureaB0C7session4cardAcA0E9Messaging_p_0ab6AccessD00aB4Type_ptcfc":{"name":"init(session:card:)","abstract":"<p>Undocumented</p>","parent_name":"SecureHealthCard"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP4cardAA0aF0_pvp":{"name":"card","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP13channelNumberSivp":{"name":"channelNumber","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP23extendedLengthSupportedSbvp":{"name":"extendedLengthSupported","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP16maxMessageLengthSivp":{"name":"maxMessageLength","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP17maxResponseLengthSivp":{"name":"maxResponseLength","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:20HealthCardControlKit06SecureB7ChannelC7session4cardAcA0E9Messaging_p_0ab6AccessD00aB4Type_ptcfc":{"name":"init(session:card:)","abstract":"<p>Undocumented</p>","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP8transmit7command12writeTimeout04readJ0AA08ResponseF0_pAA07CommandF0_p_S2dtKF":{"name":"transmit(command:writeTimeout:readTimeout:)","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP5closeyyKF":{"name":"close()","parent_name":"SecureCardChannel"},"Classes/KeyAgreement/Algorithm.html#/s:20HealthCardControlKit12KeyAgreementC9AlgorithmO25idPaceEcdhGmAesCbcCmac128yA2EmF":{"name":"idPaceEcdhGmAesCbcCmac128","abstract":"<p>id-PACE-ECDH-GM-AES-CBC-CMAC-128</p>","parent_name":"Algorithm"},"Classes/KeyAgreement/Algorithm.html#/s:20HealthCardControlKit12KeyAgreementC9AlgorithmO016negotiateSessionE07channel3can12writeTimeout04readM00ab6AccessD010ExecutableCyAA15SecureMessaging_pG0B17ReaderProviderApi0B11ChannelType_p_AK3CANVS2dtKF":{"name":"negotiateSessionKey(channel:can:writeTimeout:readTimeout:)","abstract":"<p>Negotiate a common key with a <code>HealthCard</code> given its <code>CardAccessNumber</code></p>","parent_name":"Algorithm"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO15illegalArgumentyA2EmF":{"name":"illegalArgument","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO026unexpectedFormedAnswerFromB0yA2EmF":{"name":"unexpectedFormedAnswerFromCard","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO31resultOfEcArithmeticWasInfiniteyA2EmF":{"name":"resultOfEcArithmeticWasInfinite","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO026macPcdVerificationFailedOnB0yA2EmF":{"name":"macPcdVerificationFailedOnCard","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO32macPiccVerificationFailedLocallyyA2EmF":{"name":"macPiccVerificationFailedLocally","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO07noValidaB6StatusyA2EmF":{"name":"noValidHealthCardStatus","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO02efB18AccessNotAvailableyA2EmF":{"name":"efCardAccessNotAvailable","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO011unsupportedeF9AlgorithmyAE04ASN1D016ObjectIdentifierVcAEmF":{"name":"unsupportedKeyAgreementAlgorithm(_:)","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html":{"name":"Error","abstract":"<p>Undocumented</p>","parent_name":"KeyAgreement"},"Classes/KeyAgreement/Algorithm.html":{"name":"Algorithm","abstract":"<p>Algorithm the PACE key agreement negotiation is based on.</p>","parent_name":"KeyAgreement"},"Classes/KeyDerivationFunction/Mode.html#/s:20HealthCardControlKit21KeyDerivationFunctionC4ModeO3encyA2EmF":{"name":"enc","abstract":"<p>Mode key derivation for encoding</p>","parent_name":"Mode"},"Classes/KeyDerivationFunction/Mode.html#/s:20HealthCardControlKit21KeyDerivationFunctionC4ModeO3macyA2EmF":{"name":"mac","abstract":"<p>Mode key derivation for MAC calculation</p>","parent_name":"Mode"},"Classes/KeyDerivationFunction/Mode.html#/s:20HealthCardControlKit21KeyDerivationFunctionC4ModeO8passwordyA2EmF":{"name":"password","abstract":"<p>Mode key derivation for password</p>","parent_name":"Mode"},"Classes/KeyDerivationFunction/KeyFuncType.html#/s:20HealthCardControlKit21KeyDerivationFunctionC0E8FuncTypeO6aes128yA2EmF":{"name":"aes128","abstract":"<p>Target function of family AES128</p>","parent_name":"KeyFuncType"},"Classes/KeyDerivationFunction/KeyFuncType.html":{"name":"KeyFuncType","abstract":"<p>Type of en-/decryption function</p>","parent_name":"KeyDerivationFunction"},"Classes/KeyDerivationFunction/Mode.html":{"name":"Mode","abstract":"<p>Mode of use of derived key</p>","parent_name":"KeyDerivationFunction"},"Classes/KeyDerivationFunction.html#/s:20HealthCardControlKit21KeyDerivationFunctionC06deriveE04from8funcType4mode10Foundation4DataVAJ_AC0e4FuncK0OAC4ModeOtFZ":{"name":"deriveKey(from:funcType:mode:)","abstract":"<p>Derives a key from a (shared) secret.","parent_name":"KeyDerivationFunction"},"Classes/KeyDerivationFunction.html":{"name":"KeyDerivationFunction","abstract":"<p>This class provides functionality to derive (de-/ encryption) keys from given data.</p>"},"Classes/KeyAgreement.html":{"name":"KeyAgreement","abstract":"<p>Holds functionality to negotiate a common key with a given <code>HealthCard</code> and a <code>CardAccessNumber</code>.</p>"},"Classes/SecureCardChannel.html":{"name":"SecureCardChannel","abstract":"<p>Undocumented</p>"},"Classes/SecureHealthCard.html":{"name":"SecureHealthCard","abstract":"<p>Undocumented</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}