{"Typealiases.html#/s:20HealthCardControlKit18ECPointCoordinatesa":{"name":"ECPointCoordinates","abstract":"<p>Alias for <code>(x: BigInt, y: BigInt)</code></p>"},"Structs/EllipticCurve.html#/s:20HealthCardControlKit13EllipticCurveV15brainpoolP256r1ACvpZ":{"name":"brainpoolP256r1","abstract":"<p>BrainpoolP256r1 curve</p>","parent_name":"EllipticCurve"},"Structs/EllipticCurve.html":{"name":"EllipticCurve","abstract":"<p>Structure holding parameters for defining Elliptic curves and its arithmetic operations</p>"},"Protocols/SecureMessaging.html#/s:20HealthCardControlKit15SecureMessagingP7encrypt7command0B17ReaderProviderApi11CommandType_pAfG_p_tKF":{"name":"encrypt(command:)","abstract":"<p>Encrypt the APDU Command.</p>","parent_name":"SecureMessaging"},"Protocols/SecureMessaging.html#/s:20HealthCardControlKit15SecureMessagingP7decrypt8response0B17ReaderProviderApi12ResponseType_pAfG_p_tKF":{"name":"decrypt(response:)","abstract":"<p>Decrypt the APDU Response.</p>","parent_name":"SecureMessaging"},"Protocols/SecureMessaging.html#/s:20HealthCardControlKit15SecureMessagingP10invalidateyyF":{"name":"invalidate()","abstract":"<p>Destruct the information held by this object.</p>","parent_name":"SecureMessaging"},"Protocols/SecureMessaging.html":{"name":"SecureMessaging","abstract":"<p>Component that attached to a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SecureCardChannel.html\">SecureCardChannel</a></code> takes care of message de-/encryption.</p>"},"Extensions/CardType.html#/s:21CardReaderProviderApi0A4TypeP06HealthA10ControlKitE17openSecureSession3can12writeTimeout04readN00fa6AccessH010ExecutableCyAI0faE0_pGAI3CANV_S2dtF":{"name":"openSecureSession(can:writeTimeout:readTimeout:)","abstract":"<p>Open a secure session with a Card for further scheduling/attaching Executable commands</p>","parent_name":"CardType"},"Extensions/CardChannelType.html#/s:21CardReaderProviderApi0A11ChannelTypeP06HealthA10ControlKitE04readaF012writeTimeout0jL00ga6AccessI010ExecutableCyAH0ga8PropertyF0OGSd_SdtF":{"name":"readCardType(writeTimeout:readTimeout:)","abstract":"<p>Determine <code>HealthCardPropertyType</code> either by known initialApplicationIdentifier of the <code>CardType</code>","parent_name":"CardChannelType"},"Extensions/CardChannelType.html":{"name":"CardChannelType"},"Extensions/CardType.html":{"name":"CardType","abstract":"<p>Extensions on CardType to negotiate a PACE session key for further secure</p>"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO8infiniteyA2CmF":{"name":"infinite","abstract":"<p>Represents the point infinity</p>","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO6finiteyAC6BigIntAEV1x_AF1yt_tcACmF":{"name":"finite(_:)","abstract":"<p>Represents a finite point with coordinates (x: BigInt, y: BigInt)</p>","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO6xCoord6BigIntAEVSgvp":{"name":"xCoord","abstract":"<p>(Normalized) x coordinate of this ECPoint","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO6yCoord6BigIntAEVSgvp":{"name":"yCoord","abstract":"<p>(Normalized) y coordinate of this ECPoint","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:20HealthCardControlKit7ECPointO26encodedUncompressed32Bytes10Foundation4DataVvp":{"name":"encodedUncompressed32Bytes","abstract":"<p>Uncompressed data encoding of ECPoint. Hexadecimal representation should start with 0x04.","parent_name":"ECPoint"},"Enums/ECPoint.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"ECPoint"},"Enums/ECPoint.html":{"name":"ECPoint","abstract":"<p>Representing a point on a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/EllipticCurve.html\">EllipticCurve</a></code>."},"Classes/SecureHealthCard.html#/s:19HealthCardAccessKit0aB4TypeP6statusAA0aB6StatusOvp":{"name":"status","parent_name":"SecureHealthCard"},"Classes/SecureHealthCard.html#/s:19HealthCardAccessKit0aB4TypeP07currentB7Channel0B17ReaderProviderApi0bgE0_pvp":{"name":"currentCardChannel","parent_name":"SecureHealthCard"},"Classes/SecureHealthCard.html#/s:20HealthCardControlKit06SecureaB0C7session4cardAcA0E9Messaging_p_0ab6AccessD00aB4Type_ptcfc":{"name":"init(session:card:)","abstract":"<p>Undocumented</p>","parent_name":"SecureHealthCard"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP4cardAA0aF0_pvp":{"name":"card","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP13channelNumberSivp":{"name":"channelNumber","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP23extendedLengthSupportedSbvp":{"name":"extendedLengthSupported","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP16maxMessageLengthSivp":{"name":"maxMessageLength","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP17maxResponseLengthSivp":{"name":"maxResponseLength","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:20HealthCardControlKit06SecureB7ChannelC7session4cardAcA0E9Messaging_p_0ab6AccessD00aB4Type_ptcfc":{"name":"init(session:card:)","abstract":"<p>Undocumented</p>","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP8transmit7command12writeTimeout04readJ0AA08ResponseF0_pAA07CommandF0_p_S2dtKF":{"name":"transmit(command:writeTimeout:readTimeout:)","parent_name":"SecureCardChannel"},"Classes/SecureCardChannel.html#/s:21CardReaderProviderApi0A11ChannelTypeP5closeyyKF":{"name":"close()","parent_name":"SecureCardChannel"},"Classes/KeyAgreement/Algorithm.html#/s:20HealthCardControlKit12KeyAgreementC9AlgorithmO25idPaceEcdhGmAesCbcCmac128yA2EmF":{"name":"idPaceEcdhGmAesCbcCmac128","abstract":"<p>id-PACE-ECDH-GM-AES-CBC-CMAC-128</p>","parent_name":"Algorithm"},"Classes/KeyAgreement/Algorithm.html#/s:20HealthCardControlKit12KeyAgreementC9AlgorithmO016negotiateSessionE07channel3can12writeTimeout04readM00ab6AccessD010ExecutableCyAA15SecureMessaging_pG0B17ReaderProviderApi0B11ChannelType_p_AK3CANVS2dtKF":{"name":"negotiateSessionKey(channel:can:writeTimeout:readTimeout:)","abstract":"<p>Negotiate a common key with a <code>HealthCard</code> given its <code>CardAccessNumber</code></p>","parent_name":"Algorithm"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO15illegalArgumentyA2EmF":{"name":"illegalArgument","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO026unexpectedFormedAnswerFromB0yA2EmF":{"name":"unexpectedFormedAnswerFromCard","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO31resultOfEcArithmeticWasInfiniteyA2EmF":{"name":"resultOfEcArithmeticWasInfinite","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO026macPcdVerificationFailedOnB0yA2EmF":{"name":"macPcdVerificationFailedOnCard","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO32macPiccVerificationFailedLocallyyA2EmF":{"name":"macPiccVerificationFailedLocally","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO07noValidaB6StatusyA2EmF":{"name":"noValidHealthCardStatus","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO02efB18AccessNotAvailableyA2EmF":{"name":"efCardAccessNotAvailable","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html#/s:20HealthCardControlKit12KeyAgreementC5ErrorO011unsupportedeF9AlgorithmyAE04ASN1D016ObjectIdentifierVcAEmF":{"name":"unsupportedKeyAgreementAlgorithm(_:)","abstract":"<p>Undocumented</p>","parent_name":"Error"},"Classes/KeyAgreement/Error.html":{"name":"Error","abstract":"<p>Undocumented</p>","parent_name":"KeyAgreement"},"Classes/KeyAgreement/Algorithm.html":{"name":"Algorithm","abstract":"<p>Algorithm the PACE key agreement negotiation is based on.</p>","parent_name":"KeyAgreement"},"Classes/KeyDerivationFunction/Mode.html#/s:20HealthCardControlKit21KeyDerivationFunctionC4ModeO3encyA2EmF":{"name":"enc","abstract":"<p>Mode key derivation for encoding</p>","parent_name":"Mode"},"Classes/KeyDerivationFunction/Mode.html#/s:20HealthCardControlKit21KeyDerivationFunctionC4ModeO3macyA2EmF":{"name":"mac","abstract":"<p>Mode key derivation for MAC calculation</p>","parent_name":"Mode"},"Classes/KeyDerivationFunction/Mode.html#/s:20HealthCardControlKit21KeyDerivationFunctionC4ModeO8passwordyA2EmF":{"name":"password","abstract":"<p>Mode key derivation for password</p>","parent_name":"Mode"},"Classes/KeyDerivationFunction/KeyFuncType.html#/s:20HealthCardControlKit21KeyDerivationFunctionC0E8FuncTypeO6aes128yA2EmF":{"name":"aes128","abstract":"<p>Target function of family AES128</p>","parent_name":"KeyFuncType"},"Classes/KeyDerivationFunction/KeyFuncType.html":{"name":"KeyFuncType","abstract":"<p>Type of en-/decryption function</p>","parent_name":"KeyDerivationFunction"},"Classes/KeyDerivationFunction/Mode.html":{"name":"Mode","abstract":"<p>Mode of use of derived key</p>","parent_name":"KeyDerivationFunction"},"Classes/KeyDerivationFunction.html#/s:20HealthCardControlKit21KeyDerivationFunctionC06deriveE04from8funcType4mode10Foundation4DataVAJ_AC0e4FuncK0OAC4ModeOtFZ":{"name":"deriveKey(from:funcType:mode:)","abstract":"<p>Derives a key from a (shared) secret.","parent_name":"KeyDerivationFunction"},"Classes/KeyDerivationFunction.html":{"name":"KeyDerivationFunction","abstract":"<p>This class provides functionality to derive (de-/ encryption) keys from given data.</p>"},"Classes/KeyAgreement.html":{"name":"KeyAgreement","abstract":"<p>Holds functionality to negotiate a common key with a given <code>HealthCard</code> and a <code>CardAccessNumber</code>.</p>"},"Classes/SecureCardChannel.html":{"name":"SecureCardChannel","abstract":"<p>Undocumented</p>"},"Classes/SecureHealthCard.html":{"name":"SecureHealthCard","abstract":"<p>Undocumented</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}